{"version":3,"file":"compat.js","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork/util.ts","effector/createWatch.ts","effector/observable.ts","effector/getter.ts","effector/validate.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/split.ts","effector/fork/serialize.ts","effector/fork/allSettled.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fromObservable.ts","effector/guard.ts","effector/fork/hydrate.ts","effector/restore.ts","effector/fork/scopeBind.ts"],"sourcesContent":["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import type {Template} from '../forest/index.h'\nimport type {NodeUnit, Node, ID} from './index.h'\nimport {getParent, getGraph} from './getter'\nimport {createNode} from './createNode'\n\ntype DeclarationSourceReporter = (\n  node: Node | 'region',\n  regionStack: RegionStack | null,\n) => void\n\nlet reporter: DeclarationSourceReporter\n\nexport const setGraphInspector = (fn: DeclarationSourceReporter) => {\n  reporter = fn\n}\n\ntype RegionStack = {\n  id: ID\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n  meta:\n    | Record<string, unknown>\n    | {\n        type: 'factory'\n        sid?: string\n        name?: string\n        loc: unknown\n        method?: string\n      }\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const reportDeclaration = (node: Node | 'region') => {\n  if (reporter) {\n    reporter(node, regionStack)\n  }\n}\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion<T = void>(unit: NodeUnit, cb: () => T): T {\n  const meta = getGraph(unit).meta || {}\n\n  regionStack = {\n    id: getGraph(unit).id,\n    parent: regionStack,\n    value: unit,\n    template: meta.template || readTemplate(),\n    sidRoot: meta.sidRoot || (regionStack && regionStack.sidRoot),\n    meta: meta,\n  }\n  try {\n    return cb()\n  } finally {\n    reportDeclaration('region')\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const factoryRootNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), sid, name, loc, method, type: 'factory'},\n  })\n\n  return withRegion(factoryRootNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  failReason?: unknown\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n  meta?: Record<string, any> | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n      meta,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\n/** Introspection api internals */\ntype Inspector = (stack: Stack, local: Local) => void\nlet inspector: Inspector\nexport const setInspector = (newInspector: Inspector) => {\n  inspector = newInspector\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void | null\n  stack?: Stack | void\n  meta?: Record<string, any> | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  let meta: Record<string, any> | void\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    meta = unit.meta\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n        meta,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n      meta,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (inspector) {\n      inspector(stack, local)\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: Scope,\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.values.sidMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.values.sidMap[sid])\n  } else if (ref.id in scope.values.idMap) {\n    ref.current = scope.values.idMap[ref.id]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n    local.failReason = err\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n","import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot, reportDeclaration} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(config.actualOp || EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  reportDeclaration(finalEvent.graphite)\n  return finalEvent\n}\nfunction on<State>(\n  store: Store<State>,\n  methodName: string,\n  nodeSet: CommonUnit | CommonUnit[],\n  fn: Function,\n) {\n  assertNodeSet(nodeSet, methodName, 'first argument')\n  assert(isFunction(fn), 'second argument should be a function')\n  deprecate(\n    !getMeta(store, 'derived'),\n    `${methodName} in derived store`,\n    `${methodName} in store created via createStore`,\n  )\n  forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n    store.off(trigger)\n    getSubscribers(store).set(\n      trigger,\n      createSubscription(updateStore(trigger, store, 'on', callARegStack, fn)),\n    )\n  })\n  return store\n}\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit =>\n        on(store, '.reset', unit, () => store.defaultState),\n      )\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      return on(store, '.on', nodeSet, fn)\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta: {\n      ...meta,\n      defaultState,\n    },\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>({\n      named: 'reinit',\n    })\n    store.reset(store.reinit)\n  }\n\n  plainState.meta = store.graphite.meta\n\n  reportDeclaration(store.graphite)\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n","import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\nimport {nextEffectID} from './id'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig: any = {},\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    {...maybeConfig, actualOp: EFFECT},\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_: any, stack) => {\n          let handler: Function = scope_.handler\n          const scope = getForkPage(stack)\n          if (scope) {\n            const scopeHandler = instance.sid\n              ? scope.handlers.sidMap[instance.sid]\n              : scope.handlers.unitMap.get(instance)\n            if (scopeHandler) handler = scopeHandler\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        if (!stack.meta) {\n          stack.meta = {fxID: nextEffectID()}\n        }\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n          meta: stack.meta,\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n    }\n    launch({\n      target: instance,\n      params: payload,\n      scope: forkPage,\n    })\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n      meta: stack.meta,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node, Unit} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string | null) => void,\n  needSidlessStores: true,\n): void\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n): void\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n  needSidlessStores?: boolean,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE) {\n      if (needSidlessStores || getMeta(node, 'sid')) {\n        fn(node, getMeta(node, 'sid'))\n      }\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  const unitMap = new Map<Unit<any>, any>()\n  if (mapOrRecordValues instanceof Map) {\n    const sidMap = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      if (key.sid) {\n        assert(!(key.sid in sidMap), 'duplicate sid found')\n        sidMap[key.sid!] = value\n      } else {\n        unitMap.set(key, value)\n      }\n    })\n    return {sidMap, unitMap}\n  }\n  return {sidMap: mapOrRecordValues, unitMap}\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\nexport const nextEffectID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  assert(is.unit(source), 'source must be a unit')\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.values.sidMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializeSettings = scope.sidSerializeSettings.get(sid) ?? {\n      ignore: false,\n      write: noopSerializer,\n    }\n    if (serializeSettings.ignore) return\n    const serializer = serializeSettings.write\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any> | Scope,\n  //@ts-expect-error its optional in correct cases\n  {scope, params: ctx}: {scope: Scope; params?: unknown} = {},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (\n    !is.effect(start) &&\n    !is.event(start) &&\n    !is.store(start) &&\n    !is.scope(start)\n  )\n    return Promise.reject(\n      new Error(\n        'first argument accepts only effects, events, stores or scopes',\n      ),\n    )\n  /** duplicated check because of ts validation */\n  if (is.scope(start)) {\n    scope = start\n  }\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = []\n  const launchParams: Array<{params: unknown; req: unknown} | null> = []\n  if (!is.scope(start)) {\n    add(launchUnits, start)\n    add(\n      launchParams,\n      is.effect(start)\n        ? {\n            params: ctx,\n            req: {\n              rs(value: unknown) {\n                defer.value = {status: 'done', value}\n              },\n              rj(value: unknown) {\n                defer.value = {status: 'fail', value}\n              },\n            },\n          }\n        : ctx,\n    )\n  }\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n            meta: stack.meta,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope, Store} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const {sidMap, unitMap} = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.values.sidMap, sidMap)\n      forEach(unitMap, (value, unit) => {\n        scope.values.idMap[(unit as Store<any>).stateRef.id] = value\n      })\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.values.sidMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize) {\n              if (serialize === 'ignore') {\n                forkPage.sidSerializeSettings.set(sid, {ignore: true})\n              } else {\n                forkPage.sidSerializeSettings.set(sid, {\n                  ignore: false,\n                  write: serialize.write,\n                })\n              }\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    values: {sidMap: {}, idMap: {}},\n    sidIdMap: {},\n    sidSerializeSettings: new Map(),\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {sidMap: {}, unitMap: new Map()},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap, Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const {sidMap, unitMap} = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(sidMap)\n  const storesRefIdMap: Record<string, Store<any>> = {}\n  forEach(unitMap as unknown as Map<Store<any>, any>, (_, unit) => {\n    storesRefIdMap[unit.stateRef.id] = unit\n  })\n  // Array.from(unitMap.keys(),\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(\n    traverseTarget!,\n    (node, sid) => {\n      // forkPage.sidIdMap[sid] = node.scope.state.id\n      if (sid && includes(valuesSidList, sid)) {\n        add(storeNodes, node)\n        const serializer = getMeta(node, 'serialize')\n        if (serializer && serializer !== 'ignore') {\n          sidMap[sid] = serializer.read(sidMap[sid])\n        }\n        add(storeValues, sidMap[sid])\n      } else if (node.scope.state.id in storesRefIdMap) {\n        add(storeNodes, node)\n        add(storeValues, unitMap.get(storesRefIdMap[node.scope.state.id]))\n      }\n    },\n    true,\n  )\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.values.sidMap, sidMap)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","meta","getGraph","regionStack","id","parent","value","template","readTemplate","sidRoot","reportDeclaration","getParent","createNode","node","child","to","target","scope","family","familyRaw","type","regional","sources","arrifyNodes","from","source","links","owners","seq","item","add","result","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","getMeta","pure","computationResult","safe","tryRun","filter","inspector","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","deleteMin","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","callCreate","oldPage","setCurrentPage","create","createEvent","nameOrConfig","maybeConfig","config","flattenConfig","event","deprecate","finalEvent","Object","assign","graphite","initUnit","actualOp","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","domain","hooks","on","methodName","nodeSet","assertNodeSet","isFunction","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","currentSubscription","get","firstState","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","updateFilter","defaultConfig","upd","_","b","read","a","mov","serializeMeta","ignored","sid","setMeta","reinit","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","getType","scope_","scopeHandler","sidMap","unitMap","scopeRef","createScopeRef","onResolve","onSettled","onReject","runFn","then","op","fx","fxID","nextEffectID","savedFork","setForkPage","inFlight","serialize","x","pending","amount","effect","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","needSidlessStores","visit","includes","normalizeValues","values","assertEach","mapOrRecordValues","callback","unsubscribe","reporter","observableSymbol","Symbol","observable","graph","val","compositeName","removeItem","pos","indexOf","splice","push","subject","suggestion","console","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","v","getPriority","ret","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","noopParser","sourceRef","isKernelCall","refsMap","_sourceRef$meta","sidIdMap","fromSerialize","idMap","isFresh","needToAssign","err","failReason","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","scopeFn","hookType","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","activeEffects","ok","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","syncSourceState","filterRef","readAndFilter","hasSource","jointNode","src","joint","isSourceStore","launchCase","scopeTargets","noopSerializer","start","_temp","ctx","reject","parentFork","defers","launchUnits","launchParams","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","onCreateUnit","hook","scopeLinks","domainOrConfig","optionalConfig","forkInFlightCounter","resolve","__","storeStack","storeNode","sidSerializeSettings","ignore","write","warnSerialize","resultScope","cloneOf","createScope","oldScope","opts","observableItem","disposer","complete","greedy","valuesSidList","getOwnPropertyNames","storesRefIdMap","traverseTarget","storeNodes","storeValues","serializer","savedForkPage","ignoredStores","serializeSettings","onlyChanges","newInspector","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"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"}